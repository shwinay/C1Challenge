{"version":3,"sources":["components/Jumbotron.jsx","components/ContentCard.jsx","components/ContentGrid.jsx","components/Form.jsx","App.js","serviceWorker.js","index.js"],"names":["Jumbotron","className","style","background","Component","ContentCard","state","cardState","buttonClick","newState","setState","width","this","getTitle","props","category","difficulty","dateToString","airdate","clasNames","getBody","onClick","getButtonText","question","answer","date","year","getFullYear","getMonth","toString","padStart","getDate","ContentGrid","cardList","gridCount","gridOffset","loading","Fragment","event","handleSearchSubmit","getPrevAndNext","getGrid","preventDefault","requestCards","url","startDate","endDate","fetch","then","response","json","data","questionList","questions","i","length","currQuestion","push","Date","numPages","Math","floor","pageButtonList","class","handlePagination","aria-label","handlePrev","aria-hidden","href","handleNext","newOffset","max","min","index","rowList","currRow","Form","handleCategoryChange","target","value","maxWidth","onSubmit","placeholder","type","size","onChange","getDifficultyOptions","selected","selectsStart","showYearDropdown","selectsEnd","minDate","difficulties","options","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.76af4456.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\n/*\r\n    Jumbotron component for the top of the screen\r\n*/\r\nclass Jumbotron extends Component {\r\n    render() {\r\n        return (\r\n            <div className=\"jumbotron jumbotron-fluid\" style={{background : \"#ecfcff\"}}>\r\n                <div className=\"container\">\r\n                    <h1 className=\"display-4\">Jeopardy Lookup</h1>\r\n                    <p className=\"lead\">What is \"a website to search questions and answers from your favorite trivia show?\"</p>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Jumbotron;","import React,  { Component } from 'react';\r\n\r\n/*\r\n    Card component that shows a question, answer, airdate, and category/difficulty.\r\n    props taken:\r\n        question\r\n        answer\r\n        category\r\n        difficulty\r\n        airdate\r\n*/\r\nclass ContentCard extends Component {\r\n\r\n    state = {\r\n        cardState: \"Question\" //Question or Answer\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"card\" style={{width: \"18rem\"}}>\r\n                <div className=\"card-body\">\r\n                    <center>\r\n                        <h5 className=\"card-title\">{this.getTitle()}</h5>\r\n                    </center>\r\n                        <h6 className=\"card-subtitle mb-2 text-muted\"><b>Category: </b>{this.props.category}</h6>\r\n                        <h6 className=\"card-subtitle mb-2 text-muted\"><b>Difficulty: </b>{(this.props.difficulty != null ? this.props.difficulty : \"Not Given\")}</h6>\r\n                        <h6 className=\"card-subtitle mb-2 text-muted\"><b>Airdate: </b>{this.dateToString(this.props.airdate)}</h6>\r\n                    <center>\r\n                        <p clasNames=\"card-text\">{this.getBody()}</p>\r\n                        <button className=\"btn btn-primary\" onClick={this.buttonClick}>{this.getButtonText()}</button>\r\n                    </center>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    getTitle() { return this.state.cardState }\r\n    getButtonText() { return this.state.cardState == \"Question\" ? \"See Answer\" : \"See Question\"; }\r\n    getBody() { return this.state.cardState == \"Question\" ? this.props.question : this.props.answer};\r\n    buttonClick = () => {\r\n        let newState = this.state.cardState == \"Question\" ? \"Answer\" : \"Question\";\r\n        this.setState({cardState : newState});\r\n    }\r\n\r\n    dateToString(date) {\r\n        let year = date.getFullYear();\r\n        let month = (1 + date.getMonth()).toString().padStart(2, '0');\r\n        let day = date.getDate().toString().padStart(2, '0');\r\n      \r\n        return month + '/' + day + '/' + year;\r\n    }\r\n\r\n}\r\n\r\nexport default ContentCard;","import React, { Component } from 'react';\r\nimport ContentCard from './ContentCard';\r\n\r\n/*\r\n    Component that displays ContentCards in a grid and makes queries to retrieve these cards.\r\n    Props taken -\r\n        category\r\n        difficulty\r\n        startdate\r\n        enddate\r\n*/\r\nclass ContentGrid extends Component {\r\n\r\n    state = {\r\n        cardList : [], //list of ContentCards for a given query\r\n        //cardData : [], //list of card metadata for a given query\r\n        gridCount : 9, //number of cards to display per page\r\n        gridOffset : 0, //the page\r\n        loading : false //displays loading text if loading\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <React.Fragment>\r\n                <center>\r\n                    <button className=\"btn btn-secondary m-4\" onClick={event => this.handleSearchSubmit(event)}>Search</button>\r\n                    {this.getPrevAndNext()}\r\n                    {this.getGrid()}\r\n                </center>\r\n            </React.Fragment>\r\n        )\r\n    }\r\n\r\n    handleSearchSubmit(event) {\r\n        event.preventDefault();\r\n        this.setState({\r\n            cardList: [],\r\n            gridOffset: 0\r\n        });\r\n        this.requestCards();\r\n    }\r\n\r\n    requestCards() {\r\n        let url = \"/jservice/\" + this.props.category + \"/\" + this.props.difficulty + \"/\" + this.dateToString(this.props.startDate) + \"/\" + this.dateToString(this.props.endDate);\r\n        this.setState({loading: true});\r\n        fetch(url)\r\n        .then(response => response.json())\r\n        .then(data => {\r\n            let questionList = data.questions;\r\n            for (let i = 0; i < questionList.length; i ++) {\r\n                let currQuestion = questionList[i];\r\n                this.state.cardList.push(\r\n                    <ContentCard\r\n                        question={currQuestion.question}\r\n                        answer={currQuestion.answer}\r\n                        category={currQuestion.category}\r\n                        difficulty={currQuestion.difficulty}\r\n                        airdate={new Date(currQuestion.airdate)}\r\n                    />\r\n                );\r\n            }\r\n            this.state.loading = false;\r\n            this.setState({});\r\n        });\r\n    }\r\n\r\n    getPrevAndNext() {\r\n\r\n        if (this.state.cardList.length == 0) return;\r\n        let numPages = Math.floor(this.state.cardList.length / this.state.gridCount);\r\n        if (this.state.cardList.length % this.state.gridCount != 0) numPages ++;\r\n\r\n        let pageButtonList = [];\r\n        for (let i = 0; i < numPages; i ++) {\r\n            if (i > 10) {\r\n                pageButtonList.push(\r\n                    <li class=\"page-item\"><button class=\"page-link\">...</button></li>\r\n                );\r\n                break;\r\n            }\r\n\r\n            //push active tile if offset == i\r\n            if (Math.floor(this.state.gridOffset / this.state.gridCount) == i) {\r\n                pageButtonList.push(\r\n                    <li class=\"page-item active\"><button class=\"page-link\" onClick={event => this.handlePagination(i)}>{i + 1}</button></li>\r\n                ); \r\n            }\r\n            //push non-active tile\r\n            else {\r\n                pageButtonList.push(\r\n                    <li class=\"page-item\"><button class=\"page-link\" onClick={event => this.handlePagination(i)}>{i + 1}</button></li>\r\n                );\r\n            }\r\n        }\r\n\r\n        return (\r\n            <React.Fragment>\r\n                <div className=\"text-xs-center\">\r\n                    <nav aria-label=\"Page navigation example\">\r\n                        <ul class=\"pagination justify-content-center\">\r\n                            <li class=\"page-item\">\r\n                                <button class=\"page-link\" aria-label=\"Previous\" onClick={event => this.handlePrev()}>\r\n                                    <span aria-hidden=\"true\">&laquo;</span>\r\n                                    <span class=\"sr-only\">Previous</span>\r\n                                </button>\r\n                            </li>\r\n                            {pageButtonList}\r\n                            <li class=\"page-item\">\r\n                                <button class=\"page-link\" href=\"#\" aria-label=\"Next\" onClick={event => this.handleNext()}>\r\n                                    <span aria-hidden=\"true\">&raquo;</span>\r\n                                    <span class=\"sr-only\">Next</span>\r\n                                </button>\r\n                            </li>\r\n                        </ul>\r\n                    </nav>\r\n                </div>\r\n            </React.Fragment>\r\n        );\r\n    }\r\n\r\n    handlePrev() {\r\n        let newOffset = Math.max(0, this.state.gridOffset - this.state.gridCount);\r\n        this.setState({\r\n            gridOffset: newOffset\r\n        });\r\n    }\r\n\r\n    handleNext() {\r\n        let newOffset = Math.min(this.state.cardList.length - this.state.gridCount, this.state.gridOffset + this.state.gridCount);\r\n        this.setState({\r\n            gridOffset: newOffset\r\n        });\r\n    }\r\n\r\n    handlePagination(index) {\r\n        this.setState({\r\n            gridOffset : index * this.state.gridCount\r\n        });\r\n    }\r\n\r\n    getGrid() {\r\n        if (this.state.loading) return <h1 className=\"display-4\">Loading...</h1>;\r\n\r\n        let numCols = 3;\r\n        let rowList = [];\r\n        let currRow = [];\r\n        for (let i = this.state.gridOffset; i < Math.min(this.state.gridOffset + this.state.gridCount, this.state.cardList.length); i ++) {\r\n            if (currRow.length == numCols) {\r\n                rowList.push(\r\n                    <div className=\"row m-4\">\r\n                        {currRow}\r\n                    </div>\r\n                );\r\n                currRow = [];\r\n            }\r\n            currRow.push(\r\n                <div className=\"col m-2\">\r\n                    {this.state.cardList[i]}\r\n                </div>\r\n            );\r\n        }\r\n        if (currRow.length != 0) rowList.push(\r\n            <div className=\"row m-4\">\r\n                {currRow}\r\n            </div>\r\n        );\r\n\r\n        return (\r\n            <div className=\"container\">\r\n                <center>\r\n                    {rowList}\r\n                </center>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    dateToString(date) {\r\n        let year = date.getFullYear();\r\n        let month = (1 + date.getMonth()).toString().padStart(2, '0');\r\n        let day = date.getDate().toString().padStart(2, '0');\r\n      \r\n        return month + '-' + day + '-' + year;\r\n    }\r\n\r\n}\r\n\r\nexport default ContentGrid;","import React, { Component } from \"react\"\r\nimport ContentGrid from \"./ContentGrid\"\r\nimport DatePicker from 'react-datepicker';\r\nimport 'react-datepicker/dist/react-datepicker.css';\r\n\r\nclass Form extends Component {\r\n\r\n    state = {\r\n        category : \"\",\r\n        difficulty: \"all\",\r\n        startDate: new Date(1990, 1, 1),\r\n        endDate: new Date()\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <React.Fragment>\r\n                <div className=\"container\" style={{maxWidth : \"600px\"}}>\r\n                    <form onSubmit={event => {event.preventDefault()}}>\r\n                        <center>\r\n                            <input placeholder=\"Enter Question Category\" \r\n                                className=\"form-control input m-4\"\r\n                                type=\"text\" value={this.state.category}\r\n                                size=\"25\" onChange={this.handleCategoryChange}\r\n                            />\r\n                            <select className=\"form-control m-4\" onChange={event => \r\n                            this.setState({\r\n                                    difficulty: (event.target.value == \"All Difficulties\" ? \"all\" : event.target.value)\r\n                                })}\r\n                            >\r\n                                <option>All Difficulties</option>\r\n                                {this.getDifficultyOptions()}\r\n                            </select>\r\n                            <React.Fragment>\r\n                                <DatePicker \r\n                                    className=\"form-control\"\r\n                                    selected={this.state.startDate} \r\n                                    selectsStart startDate={this.state.startDate} \r\n                                    showYearDropdown\r\n                                    endDate={this.state.endDate}\r\n                                    onChange={date => \r\n                                    this.setState({\r\n                                        startDate: (date <= this.state.endDate ? date : this.state.startDate)\r\n                                    })} \r\n                                />\r\n                                <DatePicker \r\n                                    className=\"form-control\" \r\n                                    selected={this.state.endDate} \r\n                                    selectsEnd endDate={this.state.endDate}\r\n                                    showYearDropdown \r\n                                    minDate={this.state.startDate} \r\n                                    onChange={date => this.setState({endDate: date})}\r\n                                />\r\n                            </React.Fragment>\r\n                        </center>\r\n                    </form>\r\n                </div>\r\n                <ContentGrid \r\n                    category={this.state.category} \r\n                    difficulty={this.state.difficulty}\r\n                    startDate={this.state.startDate}\r\n                    endDate={this.state.endDate}\r\n                />\r\n            </React.Fragment>\r\n        );\r\n    }\r\n\r\n    handleCategoryChange = event => {\r\n        this.setState({\r\n            category : event.target.value\r\n        });\r\n    }\r\n\r\n    getDifficultyOptions() {\r\n        let difficulties = [200, 400, 600, 800, 1000, 1200, 1600, 2000];\r\n        let options = [];\r\n        for (let i = 0; i < difficulties.length; i ++) {\r\n            options.push(<option>{difficulties[i]}</option>)\r\n        };\r\n        return options;\r\n    }\r\n}\r\n\r\nexport default Form;","import React, { Component } from 'react'\nimport Jumbotron from \"./components/Jumbotron\"\nimport Form from \"./components/Form\"\nimport ContentCard from \"./components/ContentCard\"\n\nclass App extends Component {\n  \n  state={};\n\n  render() {\n    return (\n      <React.Fragment>\n        <Jumbotron />\n        <Form />\n      </React.Fragment>\n    )\n  }\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}